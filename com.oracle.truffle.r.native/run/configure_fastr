#!/usr/bin/env bash
#
# Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 3 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 3 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This script is deployed as <FASTR>/bin/configure_fastr.sh

source="${BASH_SOURCE[0]}"
# "un-link" the source path
while [ -h "$source" ] ; do
  prev_source="$source"
  source="$(readlink "$source")";
  if [[ "$source" != /* ]]; then
    # if the link was relative, it was relative to where it came from
    dir="$( cd -P "$( dirname "$prev_source" )" && pwd )"
    source="$dir/$source"
  fi
done

function printHelp {
    if [[ "$OSTYPE" == "darwin"* ]]; then
	echo "usage: configure_fastr [--help] [--configure-etc [--enable-native-compilers-toolchain]] [--gcc-lib-path <path>]"
    else
	echo "usage: configure_fastr [--help] [--configure-etc [--enable-native-compilers-toolchain]]"
	fi    
    
	echo ""
	echo "optional arguments:"
	echo "  --configure-etc                             Configure the files in the 'etc' folder. Unless '--enable-native-compilers-toolchain' is specified, the configuration will not affect the 'etc/Makeconf' file to preserve the original compilers toolchain configuration."
	echo "  --enable-native-compilers-toolchain         Include the 'etc/Makefile' file into the configuration. It will replace the original compiler toolchain configuration in 'etc/Makefile' with the native compilers toolchain."
	if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  --gcc-lib-path <path>                       Use the <path> to locate the required gfortran libraries."
	fi

	echo ""	
	echo "examples:"
	echo "  * Basic FastR configuration:"
	echo ""
	echo "    configure_fastr"
	echo ""
	echo "  * An advanced FastR configuration with an additional configuration of the 'etc' folder except 'etc/Makefile':"
	echo ""
	echo "    configure_fastr --configure-etc"
	echo ""
    if [[ "$OSTYPE" == "darwin"* ]]; then
	echo "  * The most advanced FastR configuration with the complete configuration of the 'etc' folder. It also specifies the GCC path to locate the required libraries:"
	echo ""
	echo "    configure_fastr --configure-etc --enable-native-compilers-toolchain --gcc-lib-path /usr/local/Cellar/gcc\@4.9/4.9.4_1/lib/gcc/4.9/"
    else
	echo "  * The most advanced FastR configuration with the complete configuration of the 'etc' folder:"
	echo ""
	echo "    configure_fastr --configure-etc --enable-native-compilers-toolchain"
	fi    
	echo ""
}
           
GCC_LIB_PATH=""
CONFIGURE_ARGS=""
CONFIGURE_ETC=0
CONFIGURE_NATIVE_TOOLCHAIN=0
while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
	    printHelp
    	exit 0
    ;;
    --gcc-lib-path)
      shift
      GCC_LIB_PATH=$1
    ;;
    --configure-etc)
      CONFIGURE_ETC=1
    ;;
    --enable-native-compilers-toolchain)
      CONFIGURE_NATIVE_TOOLCHAIN=1
      CONFIGURE_ARGS="$CONFIGURE_ARGS $1"
    ;;
    *)
      CONFIGURE_ARGS="$CONFIGURE_ARGS $1"
    ;;
  esac
  shift
done

if [[ $CONFIGURE_NATIVE_TOOLCHAIN = 1 ]] && [[ $CONFIGURE_ETC = 0 ]]; then
  echo "Error: --enable-native-compilers-toolchain does not have any effect when not run with --configure-etc."
  exit 100
fi

(
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    res=0
    for lib in libgfortran.so.3 libm.so.6 libquadmath.so.0 libgcc_s.so.1; do
      if ! ldconfig -p | grep --quiet $lib; then
        echo "Error: could not find gfortran3 runtime library: $lib"
        echo "Please install the gfortran3 runtime libraries:"
        echo "    On Debian based systems: apt-get install libgfortran3"
        echo "    On Oracle Linux 7: yum install libgfortran"
        echo "    On Oracle Linux 8: yum install compat-libgfortran-48"
        res=1
        break
      fi
    done
    if ! ldconfig -p | grep --quiet "libgomp.so.1"; then
      echo "Error: could not find OpenMP runtime library: libgomp.so.1"
      echo "Please install the OpenMP runtime library runtime libraries:"
      echo "    On Debian based systems: apt-get install libgomp1"
      echo "    On Oracle Linux 7 and 8: yum install libgomp"
      echo "    Note: Oracle Linux 8 should contain libgomp by default"
      res=1
    fi
    if which gfortran > /dev/null 2> /dev/null; then
      echo "Note: if you intend to install R packages you may need additional packages."
      echo "The following packages should cover the most commonly used R packages:"
      echo "    On Debian based systems: apt-get install build-essential gfortran libxml2 libc++-dev"
      echo "    On Oracle Linux 7 and 8: yum groupinstall 'Development Tools'"
      if [[ $res != 0 ]]; then
        echo "Caution: you still need to install gfortran3 runtime libraries on all systems where this version is not the default (Ubuntu 18 or higher, Oracle Linux 8 or higher)."
      fi
    fi
    if [[ $res != 0 ]]; then
      echo "The basic configuration of FastR failed."
      echo "To learn more:"
      echo "  run this script with '--help'"
      echo "  visit https://www.graalvm.org/docs/reference-manual/languages/r"
      exit 1
    else
      echo "The basic configuration of FastR was successfull."
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    
    GCC_DARWIN_HOME=/usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9
    
    if [ -d "$GCC_DARWIN_HOME" ] ; then
	  echo "gcc 4.9 installation found."
	  
      cd -P "$( dirname "$source" )/../lib"
	  # correct paths on Mac OSX
	  GFORTRAN_LIBRARIES="libgfortran.3.dylib libquadmath.0.dylib libgomp.1.dylib libgcc_s.1.dylib"
      TARGET_LIBRARIES="`find ../library/* | grep "\(\.dylib\|\.so\)$"` `find * | grep "\(\.dylib\|\.so\)$"`"
      for GFORTRAN_LIB in $GFORTRAN_LIBRARIES
      do
  	    LIB_LOCATION="${GCC_DARWIN_HOME}/${GFORTRAN_LIB}"
	    for TARGET_LIB in $TARGET_LIBRARIES
		do
		  # don't look at symlinks
		  if [ ! -L "${TARGET_LIB}" ] ; then
		    # grep for the current path of this gfortran library in this library's linking info
		    CURRENT_LIB_NAME=`otool -L ${TARGET_LIB} | grep -o "\t.*${GFORTRAN_LIB}"`
		    if [ ! -z "$CURRENT_LIB_NAME" ] ; then
		   	  if [ "$CURRENT_LIB_NAME" != "$LIB_LOCATION" ] ; then
			    # change to the new location
			    echo "changing path to ${GFORTRAN_LIB} in ${TARGET_LIB} to $LIB_LOCATION"
			    install_name_tool -change $CURRENT_LIB_NAME $LIB_LOCATION ${TARGET_LIB}
			  fi
		    fi
		  fi
		done
      done
	  
	else
	  echo "No Homebrew gcc 4.9 installation found."
	  echo "Please ensure that you have gcc installed on your system using the homebrew command:"
	  echo "   brew install gcc@4.9"
	  
	  HOMEBREW_PREFIX_OUT=`brew config | grep HOMEBREW_PREFIX`
	  HOMEBREW_PREFIX=${HOMEBREW_PREFIX_OUT##*: }
	  if [[ "$HOMEBREW_PREFIX" != "/usr/local" ]]; then
	    echo "Your Homebrew uses other than the default installation directory prefix (i.e. /usr/local)."\
	    "Since FastR assumes the default prefix, use the following command to create a symbolic link to your Homebrew installations:"	
	    echo "   sudo ln -s $HOMEBREW_PREFIX/Cellar /usr/local/Cellar"
	  fi	
	  	
	  exit 1
    fi
    
  else
    echo "Unknown operating system."
    echo "FastR may still work."
    echo "Make sure that GCC including gfortran and OpenMP is installed on your system."
  fi

  if [[ $CONFIGURE_ETC = 1 ]]; then
    export GRAALVM_VERSION=`grep -o 'GRAALVM_VERSION=.*' "../../../../release" | cut -d= -f2`
    cd ../etc
    echo "Running the configure script..."
    ./configure --with-x=no --with-aqua=no --enable-memory-profiling FFLAGS=-O2 $CONFIGURE_ARGS > configure.log 2>&1
    res=$?
    if [[ $res != 0 ]]; then
      echo "The configuration step failed."
	  echo "The log was saved into ${PWD}/configure.log"
	  echo "FastR may still work, but compilation of some R packages may fail"
	  exit 1
	fi
	ed Makeconf < edMakeconf.etc > /dev/null 2>/dev/null
	export R_DEFAULT_PACKAGES=base
	R_LIBS_USER=`"../bin/R" --slave -e 'cat(path.expand(Sys.getenv("R_LIBS_USER")))'`
	echo "Creating user specific library directory: $R_LIBS_USER"
	mkdir -p "$R_LIBS_USER"
	echo "DONE"
  fi

)
