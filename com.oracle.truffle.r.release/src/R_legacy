#!/usr/bin/env bash

# This script is a modified graal/vm/mx.vm/launcher_template.sh
# and deployed as jre/languages/R/bin/exec/R

source="${BASH_SOURCE[0]}"
while [ -h "$source" ] ; do
  prev_source="$source"
  source="$(readlink "$source")";
  if [[ "$source" != /* ]]; then
    # if the link was relative, it was relative to where it came from
    dir="$( cd -P "$( dirname "$prev_source" )" && pwd )"
    source="$dir/$source"
  fi
done
EXEC="$( cd -P "$( dirname "$source" )" && pwd )"

exec_location=jre/languages/R/bin/exec
slashes=${exec_location//[^\/]/}
dir_count=${#slashes}
JRE="$EXEC"
for i in $(seq 1 ${dir_count}); do
  JRE="$( dirname "$JRE" )"
done

## REMOVE FOR NATIVE IMAGE: BEGIN
absolute_cp=()
jvm_args=()
launcher_args=()

# Unfortunately, parsing of `--jvm.*` arguments has to be done blind:
# Maybe some of those arguments where not really intended for the launcher but where application arguments

for o in "$@"; do
    if [[ "$o" == "--jvm.help" ]]; then    
      # TODO This condition should be removed when the Launcher handles --jvm.help correctly.
      launcher_args+=("$o")
    elif [[ "$o" == --jvm.* ]]; then
        jvm_arg="${o#--jvm.}"

        if [[ "$jvm_arg" == "cp" ]]; then
            >&2 echo "--jvm.cp argument must be of the form --jvm.cp=<classpath>, not two separate arguments"
            exit 1
        fi
        if [[ "$jvm_arg" == "classpath" ]]; then
            >&2 echo "--jvm.classpath argument must be of the form --jvm.classpath=<classpath>, not two separate arguments"
            exit 1
        fi
        if [[ "$jvm_arg" == "cp="* ]]; then
            custom_cp=${jvm_arg#cp=}
        elif [[ "$jvm_arg" == "classpath="* ]]; then
            custom_cp=${jvm_arg#classpath=}
        fi
        if [[ -z "${custom_cp+x}" ]]; then
            jvm_args+=("-${jvm_arg}")
        else
            IFS=: read -ra custom_cp_a <<< "${custom_cp}"
            for e in "${custom_cp_a[@]}"; do
                absolute_cp+=("${e}")
            done
        fi
    else
        launcher_args+=("$o")
    fi
done

JAVA_HOME="$( dirname "$JRE" )"
cp="$(IFS=: ; echo "${absolute_cp[*]}")"
cp="$JAVA_HOME/jre/languages/R/legacy/fastr-legacy-launcher.jar:$cp"

## REMOVE FOR NATIVE IMAGE: END
# internal variable used to pass args to child R processes
if [ -z "$FASTR_INTERNAL_ARGS" ]; then
    FASTR_INTERNAL_ARGS=()
fi

# we can invoke FastR directly, but we do have to set R_HOME
export R_HOME="$JRE/languages/R"
exec "$JAVA_HOME/bin/java" -cp "$cp" -noverify -Dgraal.TruffleCompilationThreshold=10000 -Dgraal.TruffleCompilerThreads=2 -Xmx8g "${jvm_args[@]}" com.oracle.truffle.r.legacylauncher.LegacyLauncher com.oracle.truffle.r.launcher.RMain R "${FASTR_INTERNAL_ARGS[@]}" "${launcher_args[@]}"
