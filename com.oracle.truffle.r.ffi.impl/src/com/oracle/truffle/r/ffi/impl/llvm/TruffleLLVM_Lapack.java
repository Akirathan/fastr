/*
 * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.oracle.truffle.r.ffi.impl.llvm;

import com.oracle.truffle.api.RootCallTarget;
import com.oracle.truffle.r.ffi.impl.common.LibPaths;
import com.oracle.truffle.r.runtime.context.RContext;
import com.oracle.truffle.r.runtime.ffi.DLLRFFI;
import com.oracle.truffle.r.runtime.ffi.LapackRFFI;
import com.oracle.truffle.r.runtime.ffi.NativeFunction;

/**
 * When the embedded GNU R is built, LLVM is created for the components of the {@code libRblas} and
 * {@code libRlapack} libraries. In principle we could call the subroutines direct but since,
 * Fortran passes every argument by reference we would have to create many length 1 arrays to wrap
 * the scalar arguments. So we call through a thing veneer in {@code lapack_rffi.c} that forwards
 * the call taking the address of the scalar arguments. We also take the liberty of defining the
 * {@code info} argument taken my most all if the functions in the veneer, and returning the value
 * as the result of the call.
 *
 * N.B. The usual implicit loading of {@code libRlapack} and {@code libRblas} that we get with
 * native {@code dlopen} via {@code libR} does not happen with LLVM, so we must force their loading
 * when this API is requested.
 *
 */
public class TruffleLLVM_Lapack implements LapackRFFI {

    TruffleLLVM_Lapack() {
        /*
         * This is a workaround for bad LLVM generated by DragonEgg for (some) of the Lapack
         * functions; additional spurious arguments. Unfortunately for this to be portable we would
         * have to load libR natively to get the rpath support. This code is OS X specific and
         * depends on specific versions.
         */
        RootCallTarget callTarget;
        boolean useLLVM = System.getenv("FASTR_LLVM_LAPACK") != null;
        if (useLLVM) {
            callTarget = openLLVMLibraries();
        } else {
            callTarget = openNativeLibraries();
            callTarget.call(LibPaths.getBuiltinLibPath("gcc_s.1"), false, true);
            callTarget.call(LibPaths.getBuiltinLibPath("quadmath.0"), false, true);
            callTarget.call(LibPaths.getBuiltinLibPath("gfortran.3"), false, true);
        }
        callTarget.call(LibPaths.getBuiltinLibPath("Rblas"), false, true);
        callTarget.call(LibPaths.getBuiltinLibPath("Rlapack"), false, true);
    }

    private static RootCallTarget openLLVMLibraries() {
        return DLLRFFI.DLOpenRootNode.create(RContext.getInstance());
    }

    private static RootCallTarget openNativeLibraries() {
        TruffleLLVM_NativeDLL.NativeDLOpenRootNode rootNode = TruffleLLVM_NativeDLL.NativeDLOpenRootNode.create();
        return rootNode.getCallTarget();
    }

    private static final class TruffleLLVM_IlaverNode extends TruffleLLVM_DownCallNode implements IlaverNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.ilaver;
        }

        @Override
        public void execute(int[] version) {
            call(version);
        }
    }

    private static final class TruffleLLVM_DgeevNode extends TruffleLLVM_DownCallNode implements DgeevNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgeev;
        }

        @Override
        public int execute(char jobVL, char jobVR, int n, double[] a, int lda, double[] wr, double[] wi, double[] vl, int ldvl, double[] vr, int ldvr, double[] work, int lwork) {
            return (int) call(jobVL, jobVR, n, a, lda, wr, wi, vl, ldvl, vr, ldvr, work, lwork);
        }
    }

    private static final class TruffleLLVM_Dgeqp3Node extends TruffleLLVM_DownCallNode implements Dgeqp3Node {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgeqp3;
        }

        @Override
        public int execute(int m, int n, double[] a, int lda, int[] jpvt, double[] tau, double[] work, int lwork) {
            return (int) call(m, n, a, lda, jpvt, tau, work, lwork);
        }
    }

    private static final class TruffleLLVM_DormqrNode extends TruffleLLVM_DownCallNode implements DormqrNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dormq;
        }

        @Override
        public int execute(char side, char trans, int m, int n, int k, double[] a, int lda, double[] tau, double[] c, int ldc, double[] work, int lwork) {
            return (int) call(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork);
        }
    }

    private static final class TruffleLLVM_DtrtrsNode extends TruffleLLVM_DownCallNode implements DtrtrsNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dtrtrs;
        }

        @Override
        public int execute(char uplo, char trans, char diag, int n, int nrhs, double[] a, int lda, double[] b, int ldb) {
            return (int) call(uplo, trans, diag, n, nrhs, a, lda, b, ldb);
        }
    }

    private static final class TruffleLLVM_DgetrfNode extends TruffleLLVM_DownCallNode implements DgetrfNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgetrf;
        }

        @Override
        public int execute(int m, int n, double[] a, int lda, int[] ipiv) {
            return (int) call(m, n, a, lda, ipiv);
        }
    }

    private static final class TruffleLLVM_DpotrfNode extends TruffleLLVM_DownCallNode implements DpotrfNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dpotrf;
        }

        @Override
        public int execute(char uplo, int n, double[] a, int lda) {
            return (int) call(uplo, n, a, lda);
        }
    }

    private static final class TruffleLLVM_DpotriNode extends TruffleLLVM_DownCallNode implements DpotriNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dpotri;
        }

        @Override
        public int execute(char uplo, int n, double[] a, int lda) {
            return (int) call(uplo, n, a, lda);
        }
    }

    private static final class TruffleLLVM_DpstrfNode extends TruffleLLVM_DownCallNode implements DpstrfNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dpstrf;
        }

        @Override
        public int execute(char uplo, int n, double[] a, int lda, int[] piv, int[] rank, double tol, double[] work) {
            return (int) call(uplo, n, a, lda, piv, rank, tol, work);
        }
    }

    private static final class TruffleLLVM_DgesvNode extends TruffleLLVM_DownCallNode implements DgesvNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgesv;
        }

        @Override
        public int execute(int n, int nrhs, double[] a, int lda, int[] ipiv, double[] b, int ldb) {
            return (int) call(n, nrhs, a, lda, ipiv, b, ldb);
        }
    }

    private static final class TruffleLLVM_DgesddNode extends TruffleLLVM_DownCallNode implements DgesddNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgesdd;
        }

        @Override
        public int execute(char jobz, int m, int n, double[] a, int lda, double[] s, double[] u, int ldu, double[] vt, int ldtv, double[] work, int lwork, int[] iwork) {
            return (int) call(jobz, m, n, a, lda, s, u, ldu, vt, ldtv, work, lwork, iwork);
        }
    }

    private static final class TruffleLLVM_DlangeNode extends TruffleLLVM_DownCallNode implements DlangeNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dlange;
        }

        @Override
        public double execute(char norm, int m, int n, double[] a, int lda, double[] work) {
            return (double) call(norm, m, n, a, lda, work);
        }
    }

    private static final class TruffleLLVM_DgeconNode extends TruffleLLVM_DownCallNode implements DgeconNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dgecon;
        }

        @Override
        public int execute(char norm, int n, double[] a, int lda, double anorm, double[] rcond, double[] work, int[] iwork) {
            return (int) call(norm, n, a, lda, anorm, rcond, work, iwork);
        }
    }

    private static final class TruffleLLVM_DsyevrNode extends TruffleLLVM_DownCallNode implements DsyevrNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.dsyevr;
        }

        @Override
        public int execute(char jobz, char range, char uplo, int n, double[] a, int lda, double vl, double vu, int il, int iu, double abstol, int[] m, double[] w, double[] z, int ldz, int[] isuppz,
                        double[] work, int lwork, int[] iwork, int liwork) {
            return (int) call(jobz, range, uplo, n, a, lda, vl, vu, il, iu, abstol, m, w, z, ldz, isuppz, work, lwork, iwork, liwork);
        }
    }

    private static final class TruffleLLVM_ZunmqrNode extends TruffleLLVM_DownCallNode implements ZunmqrNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.zunmqr;
        }

        @Override
        public int execute(String side, String trans, int m, int n, int k, double[] a, int lda, double[] tau, double[] c, int ldc, double[] work, int lwork) {
            return (int) call(side, trans, m, n, k, a, lda, tau, c, ldc, work, lwork);
        }

    }

    private static final class TruffleLLVM_ZtrtrsNode extends TruffleLLVM_DownCallNode implements ZtrtrsNode {

        @Override
        protected NativeFunction getFunction() {
            return NativeFunction.ztrtrs;
        }

        @Override
        public int execute(String uplo, String trans, String diag, int n, int nrhs, double[] a, int lda, double[] b, int ldb) {
            return (int) call(uplo, trans, diag, n, nrhs, a, lda, b, ldb);
        }

    }

    @Override
    public IlaverNode createIlaverNode() {
        return new TruffleLLVM_IlaverNode();
    }

    @Override
    public DgeevNode createDgeevNode() {
        return new TruffleLLVM_DgeevNode();
    }

    @Override
    public Dgeqp3Node createDgeqp3Node() {
        return new TruffleLLVM_Dgeqp3Node();
    }

    @Override
    public DormqrNode createDormqrNode() {
        return new TruffleLLVM_DormqrNode();
    }

    @Override
    public DtrtrsNode createDtrtrsNode() {
        return new TruffleLLVM_DtrtrsNode();
    }

    @Override
    public DgetrfNode createDgetrfNode() {
        return new TruffleLLVM_DgetrfNode();
    }

    @Override
    public DpotrfNode createDpotrfNode() {
        return new TruffleLLVM_DpotrfNode();
    }

    @Override
    public DpotriNode createDpotriNode() {
        return new TruffleLLVM_DpotriNode();
    }

    @Override
    public DpstrfNode createDpstrfNode() {
        return new TruffleLLVM_DpstrfNode();
    }

    @Override
    public DgesvNode createDgesvNode() {
        return new TruffleLLVM_DgesvNode();
    }

    @Override
    public DgesddNode createDgesddNode() {
        return new TruffleLLVM_DgesddNode();
    }

    @Override
    public DlangeNode createDlangeNode() {
        return new TruffleLLVM_DlangeNode();
    }

    @Override
    public DgeconNode createDgeconNode() {
        return new TruffleLLVM_DgeconNode();
    }

    @Override
    public DsyevrNode createDsyevrNode() {
        return new TruffleLLVM_DsyevrNode();
    }

    @Override
    public ZunmqrNode createZunmqrNode() {
        return new TruffleLLVM_ZunmqrNode();
    }

    @Override
    public ZtrtrsNode createZtrtrsNode() {
        return new TruffleLLVM_ZtrtrsNode();
    }
}
