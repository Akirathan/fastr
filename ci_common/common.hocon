# java 7 is needed by Truffle (for now)
java7 : {name : oraclejdk, version : "7",    platformspecific: true}
# java 8 must be a jvmci enabled variant
java8 : {name : labsjdk, version : "8-jvmci-latest", platformspecific: true}
java9 : {name : oraclejdk, version : "9.0.4+11", platformspecific: true}

java8Downloads : {
  downloads : {
    EXTRA_JAVA_HOMES : { pathlist :[
      ${java7}
      ${java9}
    ]}
    JAVA_HOME : ${java8}
  }
}

java9Downloads : {
  downloads : {
    EXTRA_JAVA_HOMES : { pathlist :[
      ${java7}
      ${java8}
    ]}
    JAVA_HOME : ${java9}
  }
}

logfiles : [
    "fastr_errors*.log"
    "results.json"
    "**/R-*/gnur_configure.log"
    "**/R-*/config.log"
    "**/R-*/gnur_make.log"
    "**/gnur_configure.log"
    "**/config.log"
    "**/gnur_make.log"
    "**/Makeconf"
    "fastr/libdownloads/R-*/gnur_configure.log"
    "fastr/libdownloads/R-*/config.log"
    "fastr/libdownloads/R-*/gnur_make.log"
    "../fastr/libdownloads/R-*/gnur_configure.log"
    "../fastr/libdownloads/R-*/config.log"
    "../fastr/libdownloads/R-*/gnur_make.log"
    "**/com.oracle.truffle.r.native/gnur/tests/log/all.diff"
    "**/com.oracle.truffle.r.test.native/embedded/*.output"
    "**/com.oracle.truffle.r.test.native/embedded/src/*.output"
    # Uncomment to debug pkgtest issues, produces lot of logs!
    "**/test.fastr/**/*.Rout"
    "**/test.fastr/**/*.fail"
    "**/test.fastr/**/*-tests/*.Rout"
    "**/test.gnur/**/*.Rout"
    "**/test.gnur/**/*-tests/*.Rout"
    "**/test.gnur/**/*.fail"
    # Uncomment to debug the event loop hanging issue. It must be accompanied by enabling
    # the logging by setting the TRACE_EVENT_LOOP env var to true.
    # "traceEventLoop.log"
  ]

# This is needed by all (Linux) builds but is specific to the module system employed
# on the CI cluster. Not all of the modules are needed by FastR but all are needed by the
# embedded GNU R that is built within FastR.

environmentLinux: {
  environment : {
    PKG_INCLUDE_FLAGS_OVERRIDE : "-I/cm/shared/apps/zlib/1.2.11/include -I/cm/shared/apps/bzip2/1.0.6/include -I/cm/shared/apps/xz/5.2.2/include -I/cm/shared/apps/pcre/8.38/include -I/cm/shared/apps/curl/7.50.1/include"
    PKG_LDFLAGS_OVERRIDE : "-L/cm/shared/apps/zlib/1.2.11/lib -L/cm/shared/apps/bzip2/1.0.6/lib -L/cm/shared/apps/xz/5.2.2/lib -L/cm/shared/apps/pcre/8.38/lib -L/cm/shared/apps/curl/7.50.1/lib -L/cm/shared/apps/gcc/4.9.1/lib64"
    TZDIR: "/usr/share/zoneinfo"
  }
}

environmentDarwin : {
  environment : {
    PATH : "/usr/local/bin:$JAVA_HOME/bin:$PATH"
    F77: "/usr/local/bin/gfortran-4.9"
    TZDIR: "/usr/share/zoneinfo"
  }
}

packagesLinux : {
  packages : {
    git : ">=1.8.3"
    mercurial : ">=2.2"
    "pip:astroid" : "==1.1.0"
    "pip:pylint" : "==1.1.0"
    "pip:ninja_syntax" : "==1.7.2"
    make : ">=3.83"
    gcc-build-essentials : "==4.9.1" # TODO: upgrade to 4.9.2
    pcre : ">=8.38"
    zlib : "==1.2.11"
    # these are needed to build GNU-R
    readline : "==6.3"
    curl : ">=7.50.1"
  }
}

packagesDarwin : {
  "pip:astroid" : "==1.1.0"
  "pip:pylint" : "==1.1.0"
  "pip:ninja_syntax" : "==1.7.2"
  "pcre" : "==8.38"
  "homebrew/gcc" : "==4.9"
}

# Common settings for all builds

common : ${java8Downloads} {
  logs: ${logfiles}
  catch_files : [
    "Graal diagnostic output saved in (?P<filename>.+\.zip)"
  ]
  timelimit : "1:00:00"
  environment : {
    FASTR_TEST_trace_tests : "true"
    PKG_TEST_ENV_miniUI : "LC_ALL=C"
    PKG_TEST_ENV_compare : "LC_ALL=C"
    FASTR_OPTION_PrintErrorStacktracesToFile: "true"
    GRAALVM_CHECK_EXPERIMENTAL_OPTIONS : "true"
  }
}

commonLinux: ${common} ${packagesLinux} ${environmentLinux}
commonDarwin: ${common} ${packagesDarwin} ${environmentDarwin}

# Every "pull request" (PR) is subject to a series of "gate" commands that must pass
# for the PR to be accepted into the master branch. The gate commands are run under
# the "mx" tool. This defines a common prefix for all gate commands. The "-t"
# arg indicates the exact set of gate "tasks" that will be run.

gateCmd : ["mx", "-v", "--strict-compliance", "rgate", "-B=--force-deprecation-as-warning", "--strict-mode", "-t"]

# currently disabled gate commands: FindBugs,Checkheaders,Distribution Overlap Check

# The standard set of gate tasks: the actual executable tests are in the "UnitTests" task.

gateTestCommon : {
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: with specials,Rembedded"]
  ]
}

gateTestLinux : ${gateTestCommon} ${commonLinux}

gateTestDarwin : ${gateTestCommon} ${commonDarwin} {
  setup : [
    [set-export, PKG_INCLUDE_FLAGS_OVERRIDE, "-I/cm/shared/apps/pcre/8.38/include -I/cm/shared/apps/bzip2/1.0.6/include -I/cm/shared/apps/xz/5.2.2/include -I/cm/shared/apps/curl/7.50.1/include"]
    [set-export, MOD_LIB_PATH, [echo, "${LD_LIBRARY_PATH}", |, tr, "\:", "\\n", |, grep, lib/gcc, |, tail, "-1"]]
    [set-export, PKG_LDFLAGS_OVERRIDE, "-L/cm/shared/apps/bzip2/1.0.6/lib -L/cm/shared/apps/xz/5.2.2/lib -L/cm/shared/apps/pcre/8.38/lib -L/cm/shared/apps/curl/7.50.1/lib -L${MOD_LIB_PATH} -L/usr/lib"]
  ]
}

gateTestNoDSLCacheLinux : ${commonLinux} {
  environment : ${common.environment} ${environmentLinux.environment} {
    FASTR_RELEASE: "true", # release build so that we also tests recommended pkgs installation
    FASTR_OPTION_DSLCacheSizeFactor: "0"
  }
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: with specials,Rembedded"]
    # to verify that we run with the desired configuration
    ["mx", "r", "-e", "print(list(.fastr.option(as.character(quote(DSLCacheSizeFactor))),.fastr.option(as.character(quote(UseSpecials)))))"]
  ]
}

gateTestNoSpecialsLinux : ${commonLinux}  {
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: no specials"]
  ]
}

gateTestNoDSLCacheNoSpecialsLinux : ${commonLinux} {
  environment : ${common.environment} ${environmentLinux.environment} {
    FASTR_RELEASE: "true", # release build so that we also tests recommended pkgs installation
    FASTR_OPTION_DSLCacheSizeFactor: "0"
  }
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: no specials"]
    # to verify that we run with the desired configuration
    ["mx", "r", "-e", "print(list(.fastr.option(as.character(quote(DSLCacheSizeFactor))),.fastr.option(as.character(quote(UseSpecials)))))"]
  ]
}

gateTestLinuxNFI : ${gateTestLinux} {
  environment :  ${common.environment} ${environmentLinux.environment} {
      FASTR_RFFI : "nfi"
      TZDIR: "/usr/share/zoneinfo"
  }
}

requireGCC: {
    downloads: {
        DRAGONEGG_GCC: {name: "gcc+dragonegg", version: "4.6.4-1", platformspecific: true}
        DRAGONEGG_LLVM: {name: "clang+llvm", version: "3.2", platformspecific: true}
    }
}

gateTestJava9Linux : ${java9Downloads} ${gateTestLinux} {
  downloads : {
    JAVA_HOME : ${java9Downloads.downloads.JAVA_HOME}
    EXTRA_JAVA_HOMES : ${java9Downloads.downloads.EXTRA_JAVA_HOMES}
  }
}

# This performs a number of "style" checks on the code to ensure it confirms to the project standards.

gateStyle : ${commonLinux} {
  # need pyhocon fix
  downloads : {
    JAVA_HOME : ${java8Downloads.downloads.JAVA_HOME}
    EXTRA_JAVA_HOMES : ${java8Downloads.downloads.EXTRA_JAVA_HOMES}
    JDT : {name: ecj, version: "4.5.1", platformspecific: false}
    ECLIPSE : {name: eclipse, version: "4.5.2", platformspecific: true}
  }
  environment : ${common.environment} ${environmentLinux.environment} {
    ECLIPSE_EXE : "$ECLIPSE/eclipse"
  }
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,Pylint,Canonicalization Check,BuildJavaWithJavac,SpotBugs,IDEConfigCheck,CodeFormatCheck,Checkstyle,Copyright check,UnitTests: ExpectedTestOutput file check"]
    ["mx", "clean", "--no-native"]
    ${gateCmd} ["BuildWithEcj"]
  ]
}

gateBuildWithEcj : ${commonLinux} {
  # need pyhocon fix
  downloads : {
    JAVA_HOME : ${java8Downloads.downloads.JAVA_HOME}
    EXTRA_JAVA_HOMES : ${java8Downloads.downloads.EXTRA_JAVA_HOMES}
    JDT : {name: ecj, version: "4.5.1", platformspecific: false}
    ECLIPSE : {name: eclipse, version: "4.5.2", platformspecific: true}
  }
  environment : ${common.environment} ${environmentLinux.environment} {
    ECLIPSE_EXE : "$ECLIPSE/eclipse"
  }
  run : [
    ["mx", "build"]
  ]
}

# This check runs diagnostics on the implementation of the R "builtins" in FastR, e.g., that the argument processing is sound.

rbcheck : ${commonLinux} {
  run : [
    ${gateCmd} ["Versions,JDKReleaseInfo,BuildJavaWithJavac"]
    ["mx", "rbcheck"]
    ["mx", "rbdiag"]
  ]
}

internalPkgtest: ${commonLinux} {
  run : [
    ["mx", "build"]
    ["mx", "pkgtest", "--verbose", "--repos", "FASTR", "--pkg-filelist", "com.oracle.truffle.r.test.native/packages/pkg-filelist"]
  ]
  logs: ${common.logs}
}

gnurTests: ${commonLinux} {
  run : [
    ["mx", "build"]
    ["mx", "gnu-rtests"]
  ]
}


coverageLinux : ${commonLinux}  {
  run : [
// cannot run with excluded "GeneratedBy" since that would lead to "command line too long"
//  ["mx", "--jacoco-whitelist-package", "com.oracle.truffle.r", "--jacoco-exclude-annotation", "@GeneratedBy", "--strict-compliance", "rgate", "-B=--force-deprecation-as-warning", "--strict-mode", "-t", "Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: no specials,UnitTests: with specials,Rembedded", "--jacocout", "html"],
//  ["mx", "--jacoco-whitelist-package", "com.oracle.truffle.r", "--jacoco-exclude-annotation", "@GeneratedBy", "sonarqube-upload", "-Dsonar.host.url=$SONAR_HOST_URL", "-Dsonar.projectKey=com.oracle.graalvm.r", "-Dsonar.projectName=GraalVM - R", "--exclude-generated"]
  ["mx", "--jacoco-whitelist-package", "com.oracle.truffle.r", "--strict-compliance", "rgate", "-B=--force-deprecation-as-warning", "--strict-mode", "-t", "Versions,JDKReleaseInfo,BuildJavaWithJavac,UnitTests: no specials,UnitTests: with specials,Rembedded", "--jacocout", "html"],
  ["mx", "--jacoco-whitelist-package", "com.oracle.truffle.r", "sonarqube-upload", "-Dsonar.host.url=$SONAR_HOST_URL", "-Dsonar.projectKey=com.oracle.graalvm.r", "-Dsonar.projectName=GraalVM - R", "--exclude-generated"]
  ]
}
