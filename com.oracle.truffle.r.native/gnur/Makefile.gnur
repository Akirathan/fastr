#
# Copyright (c) 2015, 2015, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This extracts, configures and builds GnuR for the current platform.
# FastR does not, obviously, need all of GnuR to be built; only those pieces
# that it shares, but is simpler and safer to just build all of it. The relevant 
# pieces are then copied to other FastR directories.
#
# Portions of the Makeconf file are then extracted to use in building the native
# parts of FastR, especially packages with native code.

.PHONY: all config config_update build clean

OSNAME := $(shell uname)

PATCH := patch
PATCH_BUILD := patch-build

ifneq ($(FASTR_RFFI),llvm)
# LLVM text parser and -g don't get on
# TODO check still true
OPT_FLAGS := -g -O2
OPT_FLAGS := -O2

CFLAGS := $(OPT_FLAGS)
CPPFLAGS := $(OPT_FLAGS)
CXXFLAGS := $(OPT_FLAGS)
endif

ifeq ($(OSNAME), Linux)
  FORCE_PIC := true
else ifeq ($(OSNAME), SunOS)
  FORCE_PIC := true
else ifeq ($(OSNAME), Darwin)
else
	$(error OS $(OSNAME) is not supported)
endif

all: Makefile $(GNUR_HOME_BINARY) $(PATCH_BUILD) iconv config $(PATCH_BUILD)/include

# After this platform check, GNUR_CONFIG_FLAGS must be set
ifeq ($(OSNAME), SunOS)
#
# Configuring GnuR for Solaris is slightly complicated for three reasons:
# 1. the default iconv utility is inadequate and has to be replaced by Gnu iconv
# 2. the solaris studio compilers must be used, assumed to be on the PATH
# 3. Solaris runs on x64 and Sparc and the configure options are different
#
    OS_ARCH := $(shell uname -p)
    SSTUDIO_HOME := $(shell which cc | sed s/bin\\/*cc//g)
    FLIBS_COMMON := -lsunimath -lfai -lsunmath -lmtsk
    ifeq ($(OS_ARCH), i386)
        SUB_ARCH := amd64
        FLIBS_SUB_ARCH := $(SSTUDIO_HOME)lib/$(SUB_ARCH)/libfsu.so.1 $(SSTUDIO_HOME)lib/$(SUB_ARCH)/libfui.so.2
        GNUR_CONFIG_FLAGS := --build=x86_64-pc-solaris2.11
    else
        SUB_ARCH := sparc/64
        FLIBS_SUB_ARCH := -lifai -lfai2 -lfsumai -lfprodai -lfminlai -lfmaxlai -lfminvai -lfmaxvai -lfui $(SSTUDIO_HOME)lib/$(SUB_ARCH)/libfsu.so.1
    endif
    ICONV := libiconv-1.14
    $(shell mkdir -p iconv_install)
    ICONV_INSTALL := $(abspath iconv_install)
    ICONV_CFLAGS := "$(CFLAGS) -m64 -xcode=pic32 -I$(ICONV_INSTALL)/include -I$(XZ_HOME)/include"
    ICONV_LDFLAGS := "-m64 -L$(ICONV_INSTALL)/lib -L$(XZ_HOME)/lib"
    ICONV_CONFIG_FLAGS := CC=cc CXX=CC CFLAGS=$(ICONV_CFLAGS) LDFLAGS=$(ICONV_LDFLAGS)
# required for Solaris compiler >=12.2, see Appendix C of R installation guide: 
# http://cran.r-project.org/doc/manuals/r-release/R-admin.html#Solaris 
    GNUR_FLIBS := FLIBS="-R$(SSTUDIO_HOME)lib/$(SUB_ARCH) $(FLIBS_COMMON) $(FLIBS_SUB_ARCH)"
    GNUR_CONFIG_FLAGS += $(ICONV_CONFIG_FLAGS) CPPFLAGS=$(ICONV_CFLAGS) DYLIB_LDFLAGS=$(ICONV_LDFLAGS) $(GNUR_FLIBS) F77="sunf95 -m64 -xcode=pic32"

iconv: $(ICONV) iconv_config iconv_build

$(ICONV):
	tar xf $(TOPDIR)/../libdownloads/$(ICONV).tar.gz

iconv_config: $(ICONV)/Makefile

$(ICONV)/Makefile:
	(cd $(ICONV); ./configure --prefix $(ICONV_INSTALL) $(ICONV_CONFIG_FLAGS) > iconv_configure.log 2>&1)

iconv_build: $(ICONV)/lib/libcharset.so

$(ICONV)/lib/libcharset.so:
	(cd $(ICONV); $(MAKE) MAKE=$(MAKE) && $(MAKE) MAKE=$(MAKE) install > iconv_make.log 2>&1)
else
# nothing to do for iconv on Linux/Darwin
iconv:

# check for overrides of the locations of required packages

ifneq ($(PKG_INCLUDE_FLAGS_OVERRIDE),)
    GNUR_CONFIG_FLAGS := CFLAGS="$(CFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)" \
                         CPPFLAGS="$(CPPFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)" \
                         CXXFLAGS="$(CXXFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)"
endif

ifneq ($(PKG_LDFLAGS_OVERRIDE),)
        GNUR_CONFIG_FLAGS := $(GNUR_CONFIG_FLAGS) LDFLAGS=$(PKG_LDFLAGS_OVERRIDE)
endif

# setup for LLVM (if enabled)
GNUR_CONFIG_FLAGS := $(GNUR_CONFIG_FLAGS) FFLAGS=-O2 $(FASTR_COMPILERS)

endif
# End of platform check

config: $(PATCH_BUILD)/Makefile config_update

ifeq ($(FORCE_PIC), true)
config_update: Makeconf.done

Makeconf.done: edMakeconf
	ed $(PATCH_BUILD)/Makeconf < edMakeconf
	touch Makeconf.done
else
config_update:
endif
# end FORCE_PIC

ifndef FASTR_RELEASE
RECPKGS := "--without-recommended-packages"
endif

ifeq ($(wildcard $(GNUR_HOME_BINARY)),)
GNUR_HOME_BINARY_PARENT := $(dir $(GNUR_HOME_BINARY))

$(info Installing R-$(R_VERSION) into $(GNUR_HOME_BINARY) ...)

$(GNUR_HOME_BINARY):
	mkdir -p $(GNUR_HOME_BINARY_PARENT)
	tar xf $(TOPDIR)/../libdownloads/R-$(R_VERSION).tar.gz -C $(GNUR_HOME_BINARY_PARENT)
	(cd $(GNUR_HOME_BINARY); ./configure --with-x=no --with-aqua=no $(RECPKGS) --enable-memory-profiling $(GNUR_CONFIG_FLAGS) > gnur_configure.log 2>&1; $(MAKE) MAKE=$(MAKE) -j > gnur_make.log 2>&1)
else
$(GNUR_HOME_BINARY): 
endif

IN_FILES := $(patsubst %.in,%,$(abspath $(shell find $(PATCH) -name '*.in')))
IN_FILES_PREFIX := $(abspath $(PATCH))
$(info IN_FILES_PREFIX : $(IN_FILES_PREFIX))
IN_FILES_PREFIX_LEN := $(shell echo $(IN_FILES_PREFIX) | wc -c)
$(info IN_FILES_PREFIX_LEN : $(IN_FILES_PREFIX_LEN))

$(PATCH_BUILD):
	(cp -R $(PATCH) $(PATCH_BUILD))
	
# Copy/link configured files from the original GNUR to patch-build
$(PATCH_BUILD)/Makefile:
	ln -s $(GNUR_HOME_BINARY)/tools $(PATCH_BUILD)/tools
	ln -s $(GNUR_HOME_BINARY)/etc $(PATCH_BUILD)/etc
	ln -s $(GNUR_HOME_BINARY)/share $(PATCH_BUILD)/share 
	ln -s $(GNUR_HOME_BINARY)/doc $(PATCH_BUILD)/doc
	ln -s $(GNUR_HOME_BINARY)/config.status $(PATCH_BUILD)/config.status
	ln -s $(GNUR_HOME_BINARY)/config.log $(PATCH_BUILD)/config.log
	for target in $(IN_FILES); do \
		f=`echo $$target | cut -c $(IN_FILES_PREFIX_LEN)-`; \
		cp -v $(GNUR_HOME_BINARY)$$f $(PATCH_BUILD)$$f; \
	done

$(PATCH_BUILD)/include:
	$(MAKE) -C $(PATCH_BUILD)/src/include

clean: cleanpatchbuild cleaniconv
	rm -f Makeconf.done

cleanpatchbuild:
	rm -rf $(PATCH_BUILD)

ifeq ($(OSNAME), SunOS)
cleaniconv:
	rm -rf $(ICONV)
	rm -rf $(ICONV_INSTALL)
else
cleaniconv:
endif
#end SunOS

