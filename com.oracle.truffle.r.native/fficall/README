fficall contains the implementation of the R FFI, as described in https://cran.r-project.org/doc/manuals/r-release/R-exts.html.
It's actually a bit more than that as it also contains code copied from GnuR, for example that supports graphics or is sufficiently
simple that it is neither necessary nor desirable to implement in Java. As this has evolved a better name for 'fficall' would be 'main'
for compatibility with GnuR.

 There are four sub-directories:
   include
   common
   jni
   variable_defs

include
=======

'include' should be thought as analgous to GnuR's src/include, i.e. internal headers needed by the code in 'src/main'.
What are trying to do by redefining them here is provide a boundary so that we don't accidently capture code from GnuR that
is specific to the implementation of GnuR that is different in FastR, e.g., the representation of R objects. Evidently not every
piece of GnuR code or an internal header has that characteristic but this strategy allows us some control to draw the boundary as
tight as possible. Obviously we want to avoid duplicating (copying) code, as this requires validating the copy when migrating GnuR versions,
so there are three levels of implementation choice for the content of the header in this directory:

* Leave empty. This allows a #include to succeed and, if code does not actually use any symbols from the header, is ok.
* Indirect to the real GnuR header. This is potentially dangerous but a simple default for code that uses symbols from the header.
* Extract specific definitions from the GnuR header into a cut-down version. While this copies code it may be necessary
  to avoid unwanted aspects of the GnuR header. In principle this can be done by a 'copy with sed' approach.

The indirection requires the use of the quote form of the #include directive. To avoid using a path that is GnuR version dependent,
the file gnurheaders.mk provides a make variable GNUR_HEADER_DEFS with a set of appropriate -D CFLAGS.

Ideally, code is always compiled in such a way that headers never implicitly read from GnuR, only via the 'include' directory.
Unfortunately this cannot always be guaranteed as a directive of the form include "foo.h" (as opposed to include <foo.h>) in the
GnuR C code will always access a header in the same directory as the code being compiled. I.e., only the angle-bracket form can be controlled
by the -I compiler flag. If this is a problem, the only solution is to 'copy with sed' the .c file and convert the quote form to the
angle bracket form.

common
======
'common' contains code that has no explicit JNI dependencies and has been extracted for reuse in other implementations. This code is mostly
copied/included from GnuR. N.B. Some modified files have a "_fastr" suffix to avoid a clash with an existing file in GnuR that would match
the Makefile rule for compiling directly from the GnuR file.

jni
===
'jni' contains the implementation that is based on and has explicit dependencies on Java JNI.

The R FFI is rather baroque and defined in large set of header files in the 'include' directory that is a sibling of 'fficall'.
In GnuR, the implementation of the functions is spread over the GnuR C files in 'src/main'. To ease navigation of the FastR implementation,
in general, the implementation of the functions in a header file 'Rxxx.h' is stored in the file 'Rxxx.c'.

The points of entry from Java are defined in the file rfficall.c. Various utility functions are defined in rffiutils.{h,c}.

variable_defs
=============

The GnuR FFI defines a large number of (extern) variables the defintiions of which, in GnuR, are scattered across the source files.
In FastR these are collected into one file, variable_defs.h. However, the actual initialization of the variables is, in general, implementation
dependent. In order to support a JNI and a non-JNI implementation, the file is stored in a seperate directory.
