#!/usr/bin/env bash
#
# Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 3 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 3 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This script is deployed as <FASTR>/bin/configure_fastr.sh

source="${BASH_SOURCE[0]}"
# "un-link" the source path
while [ -h "$source" ] ; do
  prev_source="$source"
  source="$(readlink "$source")";
  if [[ "$source" != /* ]]; then
    # if the link was relative, it was relative to where it came from
    dir="$( cd -P "$( dirname "$prev_source" )" && pwd )"
    source="$dir/$source"
  fi
done

function printHelp {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Checks presence of FastR dependencies and configures the paths in dynamic libraries accordingly."
    echo "usage: configure_fastr [--help] [--macos-no-homebrew] [--gcc-lib-path <path>]"
  else
    echo "Checks presence of FastR dependencies."
    echo "usage: configure_fastr [--help]"
  fi    
    
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo ""
    echo "optional arguments:"
    echo "  --gcc-lib-path <path>                       Use the <path> to locate the required gfortran libraries."
    echo "  --macos-no-homebrew                         Allows the script to proceed even if the target system does not have homebrew"
  fi
}

GCC_LIB_PATH=""
NO_BREW=0
while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
      printHelp
      exit 0
    ;;
    --gcc-lib-path)
      shift
      GCC_LIB_PATH=$1
    ;;
    --macos-no-homebrew)
      NO_BREW=1
    ;;
    *)
      >&2 echo "Unknown option '$1'"
      printHelp
      exit 1
    ;;
  esac
  shift
done

(
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    if ! command -v ldconfig>/dev/null; then
      >&2 echo "Tool 'ldconfig' is not available. Maybe you need to run this as a root?"
      exit 2
    fi
    res=0
    if ! ldconfig -p | grep --quiet "libgomp.so.1"; then
      echo "Error: could not find OpenMP runtime library: libgomp.so.1"
      echo "Please install the OpenMP runtime library runtime libraries:"
      echo "    On Debian based systems: apt-get install libgomp1"
      echo "    On Oracle Linux: yum install libgomp"
      echo "    Note: Oracle Linux 8 should contain libgomp by default"
      res=1
    fi
    if [[ $res != 0 ]]; then
      echo "The basic configuration of FastR failed."
      echo "To learn more:"
      echo "  run this script with '--help'"
      echo "  visit https://www.graalvm.org/docs/reference-manual/languages/r"
      exit 1
    else
      echo "The basic configuration of FastR was successfull."
      echo ""
      echo "Note: if you intend to install R packages you may need additional dependencies."
      echo "The following packages should cover the most commonly used R packages:"
      echo "    On Debian based systems: apt-get install build-essential gfortran libxml2 libc++-dev"
      echo "    On Oracle Linux: yum groupinstall 'Development Tools' && yum install gcc-gfortran"
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then

    if which brew; then
      GCC_DARWIN_HOME=/usr/local/Cellar/gcc@4.9/4.9.4_1/lib/gcc/4.9
      
      if [ -d "$GCC_DARWIN_HOME" ] ; then
        echo "gcc 4.9 installation found."
        
        cd -P "$( dirname "$source" )/../lib"
        # correct paths on Mac OSX
        GFORTRAN_LIBRARIES="libgfortran.3.dylib libquadmath.0.dylib libgomp.1.dylib libgcc_s.1.dylib"
        TARGET_LIBRARIES="`find ../library/* | grep "\(\.dylib\|\.so\)$"` `find * | grep "\(\.dylib\|\.so\)$"`"
        for GFORTRAN_LIB in $GFORTRAN_LIBRARIES
        do
          LIB_LOCATION="${GCC_DARWIN_HOME}/${GFORTRAN_LIB}"
          for TARGET_LIB in $TARGET_LIBRARIES
          do
            # don't look at symlinks
            if [ ! -L "${TARGET_LIB}" ] ; then
              # grep for the current path of this gfortran library in this library's linking info
              CURRENT_LIB_NAME=`otool -L ${TARGET_LIB} | grep -o "\t.*${GFORTRAN_LIB}"`
              if [ ! -z "$CURRENT_LIB_NAME" ] ; then
                if [ "$CURRENT_LIB_NAME" != "$LIB_LOCATION" ] ; then
                  # change to the new location
                  echo "changing path to ${GFORTRAN_LIB} in ${TARGET_LIB} to $LIB_LOCATION"
                  install_name_tool -change $CURRENT_LIB_NAME $LIB_LOCATION ${TARGET_LIB}
                fi
              fi
            fi
          done
        done
      else
        echo "No Homebrew gcc 4.9 installation found."
        echo "Please ensure that you have gcc installed on your system using the homebrew command:"
        echo "   brew install gcc@4.9"
        
        HOMEBREW_PREFIX_OUT=`brew config | grep HOMEBREW_PREFIX`
        HOMEBREW_PREFIX=${HOMEBREW_PREFIX_OUT##*: }
        if [[ "$HOMEBREW_PREFIX" != "/usr/local" ]]; then
          echo "Your Homebrew uses other than the default installation directory prefix (i.e. /usr/local)."\
          "Since FastR assumes the default prefix, use the following command to create a symbolic link to your Homebrew installations:"  
          echo "   sudo ln -s $HOMEBREW_PREFIX/Cellar /usr/local/Cellar"
        fi  
          
        exit 1
      fi
    else # not "which brew"
      if [ $NO_BREW = 0 ]; then
        echo "FastR depends on GFortran 3 runtime libraries."
        echo "It appears that this system does not use the homebrew package manager."
        echo "We suggest to use homebrew and install the necessary dependencies with:"
        echo "   brew install gcc@4.9"
        echo "If you want to use another installation of GFortran 3 libraries, re-run this script with '--macos-no-homebrew'."
        exit 2
      fi

      cd -P "$( dirname "$source" )/../lib"
      # correct paths on Mac OSX
      GFORTRAN_LIBRARIES="libgfortran.3.dylib libquadmath.0.dylib libgomp.1.dylib libgcc_s.1.dylib"
      # This allows determining if all libraries were found after the main loop
      GFORTRAN_LIBRARIES_CHECK="libgfortran libquadmath libgomp libgcc_s"
      GFORTRAN_LOCATIONS="$GCC_LIB_PATH /opt/local/lib /opt/local/lib/libgcc /usr/local/gfortran/lib"
      TARGET_LIBRARIES="`find ../library/* | grep "\(\.dylib\|\.so\)$"` `find * | grep "\(\.dylib\|\.so\)$"`"
      FOUND=""
      FOUND_FULL=""
      LAST_FOUND=""
      for GFORTRAN_LIB in $GFORTRAN_LIBRARIES
      do
        # Remove the 'dylib' extension	
        GFORTRAN_LIB_BASE=${GFORTRAN_LIB%.*}
        # Remove the number extension
        GFORTRAN_LIB_BASE=${GFORTRAN_LIB_BASE%.*}
        if [ "$LAST_FOUND" = "$GFORTRAN_LIB_BASE" ] ; then
          # A previous version of the current library has already been found
          echo "skipping $GFORTRAN_LIB"
          continue;
        fi
        for LOCATION in $GFORTRAN_LOCATIONS
        do
          if test -f "${LOCATION}/${GFORTRAN_LIB}"; then
            LIB_LOCATION="${LOCATION}/${GFORTRAN_LIB}"
            FOUND="$FOUND $GFORTRAN_LIB_BASE"
            LAST_FOUND=$GFORTRAN_LIB_BASE          
            echo "${GFORTRAN_LIB} found at ${LIB_LOCATION}"
            for TARGET_LIB in $TARGET_LIBRARIES
            do
              # don't look at symlinks
              if [ ! -L "${TARGET_LIB}" ] ; then
                # grep for the current path of this gfortran library in this library's linking info
                CURRENT_LIB_NAME=`otool -L ${TARGET_LIB} | grep -o "\t.*${GFORTRAN_LIB_BASE}[^ ]*"`
                if [ ! -z "$CURRENT_LIB_NAME" ] ; then
                if [ "$CURRENT_LIB_NAME" != "$LIB_LOCATION" ] ; then
                  # change to the new location
                  echo "changing path to ${GFORTRAN_LIB} in ${TARGET_LIB} to $LIB_LOCATION"
                  FOUND_FULL="${FOUND_FULL}\n  ${LIB_LOCATION}"
                  install_name_tool -change $CURRENT_LIB_NAME $LIB_LOCATION ${TARGET_LIB}
                fi
                fi
              fi
            done
            break
          fi
        done
      done
    
      if [ "$FOUND" != " $GFORTRAN_LIBRARIES_CHECK" ] ; then
        echo "From expected libraries '$GFORTRAN_LIBRARIES_CHECK' found only '$FOUND'."
        echo "Please ensure that you have GFortran 3 installed on your system."
        echo "We suggest to use homebrew and install the necessary dependencies with:"
        echo "   brew install gcc@4.9"
        echo "If the GFortran 3 runtime libraries are installed in a non-standard location, you can specify that location using the '--gcc-lib-path' parameter."
        exit 1
      else
        echo "Succesfully updated FastR installation to use the GFortran 3 system libraries."
        FASTR_HOME=$(cd ..; pwd -P )
        echo "The fortran compiler flags in $FASTR_HOME/etc/Makeconf (variable FLIBS) were not updated and must be adjusted manually!"
      fi
    fi # which brew
  else
    echo "Unknown operating system."
    echo "FastR may still work."
    echo "Make sure that GCC including gfortran and OpenMP is installed on your system."
  fi

  if [[ $CONFIGURE_ETC = 1 ]]; then
    export GRAALVM_VERSION=`grep -o 'GRAALVM_VERSION=.*' "../../../../release" | cut -d= -f2`
    cd ../etc
    echo "Running the configure script..."
    ./configure --with-x=no --with-aqua=no --enable-memory-profiling FFLAGS=-O2 $CONFIGURE_ARGS > configure.log 2>&1
    res=$?
    if [[ $res != 0 ]]; then
      echo "The configuration step failed."
    echo "The log was saved into ${PWD}/configure.log"
    echo "FastR may still work, but compilation of some R packages may fail"
    exit 1
  fi
  ed Makeconf < edMakeconf.etc > /dev/null 2>/dev/null
  export R_DEFAULT_PACKAGES=base
  R_LIBS_USER=`"../bin/R" --slave -e 'cat(path.expand(Sys.getenv("R_LIBS_USER")))'`
  echo "Creating user specific library directory: $R_LIBS_USER"
  mkdir -p "$R_LIBS_USER"
  echo "DONE"
  fi

)
